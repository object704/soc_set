<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ApplicationSonataUserBundleEntityValansiaProxy extends \Application\Sonata\UserBundle\Entity\Valansia implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setOpisanie($opisanie)
    {
        $this->__load();
        return parent::setOpisanie($opisanie);
    }

    public function getOpisanie()
    {
        $this->__load();
        return parent::getOpisanie();
    }

    public function setNavikOpit($navikOpit)
    {
        $this->__load();
        return parent::setNavikOpit($navikOpit);
    }

    public function getNavikOpit()
    {
        $this->__load();
        return parent::getNavikOpit();
    }

    public function setTimeRazmech($timeRazmech)
    {
        $this->__load();
        return parent::setTimeRazmech($timeRazmech);
    }

    public function getTimeRazmech()
    {
        $this->__load();
        return parent::getTimeRazmech();
    }

    public function setTipRab($tipRab)
    {
        $this->__load();
        return parent::setTipRab($tipRab);
    }

    public function getZarplata()
    {
        $this->__load();
        return parent::getZarplata();
    }

    public function setZarplata($zarplata)
    {
        $this->__load();
        return parent::setZarplata($zarplata);
    }

    public function getTipRab()
    {
        $this->__load();
        return parent::getTipRab();
    }

    public function setObazannosti($obazannosti)
    {
        $this->__load();
        return parent::setObazannosti($obazannosti);
    }

    public function getObazannosti()
    {
        $this->__load();
        return parent::getObazannosti();
    }

    public function setCompania(\Application\Sonata\UserBundle\Entity\Compania $compania)
    {
        $this->__load();
        return parent::setCompania($compania);
    }

    public function getCompania()
    {
        $this->__load();
        return parent::getCompania();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'opisanie', 'navikOpit', 'timeRazmech', 'tipRab', 'obazannosti', 'compania', 'zarplata');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}